# Generated by Django 4.1 on 2022-08-23 16:49

from django.db import migrations, models
import django.db.models.deletion
import network.all.base_model.validators.base_validators
import network.inventory.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tags', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('root', models.BooleanField(default=False, help_text='Root object cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Object status.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Object name.', max_length=32, unique=True, validators=[network.all.base_model.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(blank=True, default='Object default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Object description.', max_length=256, null=True, validators=[network.all.base_model.validators.base_validators.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Object graphical representation.', verbose_name='Object ico')),
                ('username', models.CharField(help_text='Local / remote user name.', max_length=64, verbose_name='Username')),
                ('password', models.CharField(help_text='Local / remote user password.', max_length=64, verbose_name='Password')),
                ('tag', models.ManyToManyField(blank=True, help_text='Related tags.', to='tags.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('root', models.BooleanField(default=False, help_text='Root object cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Object status.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Object name.', max_length=32, unique=True, validators=[network.all.base_model.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(blank=True, default='Object default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Object description.', max_length=256, null=True, validators=[network.all.base_model.validators.base_validators.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Object graphical representation.', verbose_name='Object ico')),
                ('hostname', models.CharField(error_messages={'blank': 'IP / DNS name field is mandatory.', 'invalid': 'Enter a valid IP address or DNS resolvable hostname. It must contain 4 to 32 digits, letters and special characters -, _, . or spaces.', 'null': 'IP / DNS name field is mandatory.', 'unique': 'Device with this hostname already exists.'}, help_text='Valid IP address or domain name.', max_length=32, unique=True, validators=[network.inventory.validators.HostnameValueValidator()], verbose_name='Hostname')),
                ('ssh_port', models.IntegerField(blank=True, help_text='SSH protocol port number.', null=True, verbose_name='SSH port')),
                ('https_port', models.IntegerField(blank=True, help_text='HTTPS protocol port number.', null=True, verbose_name='HTTPS port')),
                ('ssh_status', models.BooleanField(default=False, help_text='Status of SSH connection to the device.', verbose_name='SSH status')),
                ('https_status', models.BooleanField(default=False, help_text='Status of HTTPS connection to the device.', verbose_name='HTTPS status')),
                ('secret', models.CharField(blank=True, help_text='Network device secret password.', max_length=64, null=True, verbose_name='Secret password')),
                ('token', models.CharField(blank=True, help_text='Network device API key.', max_length=128, null=True, verbose_name='API token')),
                ('certificate', models.BooleanField(default=False, help_text='Check network device certificate during HTTPS connection.', verbose_name='Certificate')),
                ('credential', models.ForeignKey(blank=True, help_text='Credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Credential')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('root', models.BooleanField(default=False, help_text='Root object cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Object status.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Object name.', max_length=32, unique=True, validators=[network.all.base_model.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(blank=True, default='Object default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Object description.', max_length=256, null=True, validators=[network.all.base_model.validators.base_validators.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Object graphical representation.', verbose_name='Object ico')),
                ('netmiko_name', models.CharField(help_text='Netmiko name.', max_length=32, unique=True, verbose_name='Netmiko name')),
                ('tag', models.ManyToManyField(blank=True, help_text='Related tags.', to='tags.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Device type',
                'verbose_name_plural': 'Device types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('root', models.BooleanField(default=False, help_text='Root object cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Object status.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Object name.', max_length=32, unique=True, validators=[network.all.base_model.validators.base_validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(blank=True, default='Object default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Object description.', max_length=256, null=True, validators=[network.all.base_model.validators.base_validators.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='Object graphical representation.', verbose_name='Object ico')),
                ('ssh_port', models.IntegerField(blank=True, help_text='SSH protocol port number.', null=True, verbose_name='Default SSH port')),
                ('https_port', models.IntegerField(blank=True, help_text='HTTPS protocol port number.', null=True, verbose_name='Default HTTPS port')),
                ('secret', models.CharField(blank=True, help_text='Network device secret password.', max_length=64, null=True, verbose_name='Default secret password')),
                ('token', models.CharField(blank=True, help_text='Network device API key.', max_length=128, null=True, verbose_name='Default API token')),
                ('certificate', models.BooleanField(blank=True, help_text='Check network device certificate during HTTPS connection.', null=True, verbose_name='Default certificate')),
                ('credential', models.ForeignKey(blank=True, help_text='Credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Default credential')),
                ('devices', models.ManyToManyField(blank=True, help_text='All inventory that belongs to current folder.', to='inventory.device', verbose_name='Devices')),
                ('root_folder', models.ForeignKey(blank=True, help_text='The parent folder to witch the current folder belongs.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.group', verbose_name='Root folder')),
                ('tag', models.ManyToManyField(blank=True, help_text='Related tags.', to='tags.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(blank=True, help_text='Type of network device system.', null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.devicetype', verbose_name='Device type'),
        ),
        migrations.AddField(
            model_name='device',
            name='tag',
            field=models.ManyToManyField(blank=True, help_text='Related tags.', to='tags.tag', verbose_name='Tag'),
        ),
        migrations.CreateModel(
            name='DeviceTypeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('root', models.BooleanField(default=False, help_text='Root object cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Object status.', verbose_name='Active')),
                ('special', models.BooleanField(default=False, help_text='Spacial type of Device type template object.', verbose_name='Special template')),
                ('vrf', models.BooleanField(default=False, help_text='VRF cli command template.', verbose_name='VRF template')),
                ('command', models.CharField(help_text='CLI command that will be executed on network device.', max_length=64, verbose_name='CLI command')),
                ('sfm_expression', models.TextField(help_text='SFM expression used to check if CLI command/s output is correct.', verbose_name='SFM expression')),
                ('device_type', models.ForeignKey(help_text='Type of network device system.', on_delete=django.db.models.deletion.PROTECT, to='inventory.devicetype', verbose_name='Device type')),
            ],
            options={
                'verbose_name': 'Device type template',
                'verbose_name_plural': 'Device type templates',
                'ordering': ['pk'],
                'unique_together': {('command', 'device_type')},
            },
        ),
    ]
