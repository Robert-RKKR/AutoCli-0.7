# Generated by Django 4.0.7 on 2022-08-16 20:57

from django.db import migrations, models
import system.administration.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('deleted', models.BooleanField(default=False, help_text='Is object deleted.', verbose_name='Deleted')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='object last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Administrator with this name already exists.'}, help_text='Administrator username.', max_length=32, unique=True, validators=[system.administration.validators.UsernameValidator], verbose_name='name')),
                ('email', models.EmailField(blank=True, help_text='Administrator e-mail address.', max_length=254, verbose_name='E-mail address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='Active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
                'ordering': ['name'],
            },
        ),
    ]
